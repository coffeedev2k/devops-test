# установка:
# 1) установка: pip install pre-commit(устанавливает программу для создания пре-коммитов)
# 2) в корне репы создать .pre-commit-config.yaml, это файл, показывающий программе pre-commit какие тесты применять для кода
# 3) запустить pre-commit install чтобы он создал сам непосредственно хук в текущем репозитории в файле .git/hooks/pre-commit
# 4) можно потом запустить для всех файлов сразу, чтобы применить новые правила ко всем файлам проекта pre-commit run --all-files
# использование:
# pre-commit run    запускает текущие хуки без коммита, использовать надо до коммита
repos:
  - repo: https://github.com/psf/black # здесь может быть любой репо с тестами, даже local, что говорит о том, что проект использует тесты внутри себя
    rev: 22.1.0                        # версия для использования, чтобы на фиксированные правила ориентироваться
    hooks:
      - id: black                      # что именно запускать для тестов
        args: [--safe]                 # с какими аргументами запускать

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v2.3.0
    hooks:
      - id: check-added-large-files #- prevents giant files from being committed.
      - id: check-ast #- simply checks whether the files parse as valid python.
      - id: check-byte-order-marker #- forbids files which have a utf-8 byte-order marker.
      - id: check-builtin-literals #- requires literal syntax when initializing empty or zero python builtin types.
      - id: check-case-conflict #- checks for files that would conflict in case-insensitive filesystems.
      - id: check-docstring-first #- checks a common error of defining a docstring after code.
      - id: check-executables-have-shebangs #- ensures that (non-binary) executables have a shebang.
      - id: check-json #- checks json files for parseable syntax.
      - id: pretty-format-json #- sets a standard for formatting json files.
      - id: check-merge-conflict #- checks for files that contain merge conflict strings.
      - id: check-symlinks #- checks for symlinks which do not point to anything.
      - id: check-toml #- checks toml files for parseable syntax.
      - id: check-vcs-permalinks #- ensures that links to vcs websites are permalinks.
      - id: check-xml #- checks xml files for parseable syntax.
      - id: check-yaml #- checks yaml files for parseable syntax.
      - id: debug-statements #- checks for debugger imports and py37+ `breakpoint()` calls in python source.
      - id: detect-private-key #- detects the presence of private keys.
      - id: double-quote-string-fixer #- replaces double quoted strings with single quoted strings.
      - id: end-of-file-fixer #- ensures that a file is either empty, or ends with one newline.
      - id: file-contents-sorter #- sorts the lines in specified files (defaults to alphabetical). you must provide list of target files as input in your .pre-commit-config.yaml file.
      - id: forbid-new-submodules #- prevents addition of new git submodules.
      - id: mixed-line-ending #- replaces or checks mixed line ending.
      - id: name-tests-test #- this verifies that test files are named correctly.
      - id: requirements-txt-fixer #- sorts entries in requirements.txt.
      - id: sort-simple-yaml #- sorts simple yaml files which consist only of top-level keys, preserving comments and blocks.
      - id: trailing-whitespace #- trims trailing whitespace.

  - repo: https://github.com/IamTheFij/docker-pre-commit
    rev: v2.0.1
    hooks:
      - id: docker-compose-check

  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.64.0
    hooks:
      - id: infracost_breakdown #- Check terraform infrastructure cost
      - id: terraform_fmt #- Rewrites all Terraform configuration files to a canonical format.
      - id: terraform_docs #- Inserts input and output documentation into README.md (using terraform-docs).
      - id: terraform_docs_without_aggregate_type_defaults #- Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.
      - id: terraform_docs_replace #- Overwrite content of README.md with terraform-docs.
      - id: terraform_validate #- Validates all Terraform configuration files.
      - id: terraform_providers_lock #- Updates provider signatures in dependency lock files.
      - id: terraform_tflint #- Validates all Terraform configuration files with TFLint.
      - id: terragrunt_fmt #- Rewrites all Terragrunt configuration files to a canonical format.
      - id: terragrunt_validate #- Validates all Terragrunt configuration files.
      - id: checkov #- Runs checkov on Terraform templates.
      - id: terrascan #- Runs terrascan on Terraform templates.

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v0.931
    hooks:
      - id: mypy
        args: [--config-file setup.cfg]

  - repo: https://github.com/pycqa/flake8
    rev: '4.0.1'
    hooks:
      - id: flake8
        args: [--config-file setup.cfg]

  - repo: local
    hooks:
      - id: pytest # this hook run only bu hands by command:  pre-commit run --hook-stage manual pytest
        name: pytest
        description: This hook pytest
        language: system
        entry: pytest
        always_run: true #(optional: default false) if true this hook will run even if there are no matching files.
        verbose: true #(optional) if true, forces the output of the hook to be printed even when the hook passes. new in 1.6.0.
        stages: [manual] #(optional: default (all stages)) confines the hook to the commit, merge-commit, push, prepare-commit-msg, commit-msg, post-checkout, post-commit, post-merge, post-rewrite, or manual stage.
        pass_filenames: false

  - repo: local
    hooks:
      - id: coverage # this hook run only bu hands by command:  pre-commit run --hook-stage manual coverage
        name: coverage
        description: This hook coverage
        language: system
        entry: coverage run -m pytest
        always_run: true #(optional: default false) if true this hook will run even if there are no matching files.
        verbose: true #(optional) if true, forces the output of the hook to be printed even when the hook passes. new in 1.6.0.
        stages: [manual] #(optional: default (all stages)) confines the hook to the commit, merge-commit, push, prepare-commit-msg, commit-msg, post-checkout, post-commit, post-merge, post-rewrite, or manual stage.
        pass_filenames: false
